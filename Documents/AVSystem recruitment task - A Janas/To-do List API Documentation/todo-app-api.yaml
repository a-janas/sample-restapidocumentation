openapi: 3.0.3
info:
  title: Simple To-Do List REST API
  #more info needed for a proper description - which database is it querying data from? who adds and administers the tasks? what are the potential use cases and/or who is expected to use this API?
  description: |
    To-Do List is a [REST](https://en.wikipedia.org/wiki/REST) API
    designed for exporting to-do items from the database.
    
    You can create a custom to-do lists by filtering available tasks
    
    
  version: 1.0.0
servers:
  - url: https://simpletodoapp.com/v1
paths:
  /todos/export:
    get:
      tags:
        - Export Options
      summary: Export to-do list items as a CSV file
      description: |
        Export a to-do list of tasks from the database in csv format.
        Tasks can be filtered by their completion status or tags.
      parameters:
        - name: includeHeader
          in: query
          description: Whether to include csv header. #(default is **true**)
          required: false
          schema:
           type: boolean
           default: true
        - name: statusFilter
          in: query
          description: Filter by **completed**, **pending** or return **all** tasks.
          required: false
          schema:
            type: string
            enum: [all, completed, pending]
            default: all
        - name: sortBy
          in: query
          description: >
           Sorts the tasks in the CSV by one of the following fields: **ID**, 
           **name**, 
           **status**, 
           **due date** or 
           **creation date**
          required: false
          schema:
            type: string
            enum: [id, task, completed, dueDate, createdAt]
            default: id
        - name: sortOrder
          in: query
          description: Order of sorting (**ascending** or **descending**).
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: asc
        - name: tagsFilter
          in: query
          description: Return results with at least one of the specified tags present.
          required: false
          schema:
            type: array
            items:
              type: string
            example: ["urgent", "shopping"]
      responses:
        '200':
          description: Successfully generated CSV file containing records matching set parameters.
          headers:
            Content-Type:
              description: The content type of the response (CSV).
              schema:
                type: string
                example: text/csv
            Content-Disposition:
              description: Indicates the response is a downloadable file.
              schema:
                type: string
                example: attachment; filename="todos.csv"
          content:
            text/csv:
              schema:
                type: string
                format: binary
                example: |
                  id,task,completed,dueDate,createdAt,updatedAt,tags
                  1,Buy groceries,false,2024-12-01,2024-11-20T10:00:00Z,2024-11-21T15:45:00Z,"shopping,urgent"
                  2,Clean the house,true,2024-12-05,2024-11-18T14:30:00Z,2024-11-19T10:10:00Z,"chores"
                  3,Submit project,false,2024-11-30,2024-11-22T08:00:00Z,2024-11-22T08:30:00Z,"work,priority"
        '400':
          description: The request parameters are invalid.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Bad request
        '404':
          description: Not Found - No match for the specified filters.
          
components:
  schemas:
    Task:
      type: object
      properties:
        id:
          type: integer
          description: Unique ID of the task.
          example: 1
        task:
          type: string
          description: Name or a short description of the task.
          example: Buy groceries
        completed:
          type: boolean
          description: Whether the task is completed.
          example: false
        dueDate:
          type: string
          format: date
          description: Date by which the task is expected to be completed.
          example: 2024-12-01
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the task was created.
          example: 2024-11-20T10:00:00Z
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the task was last updated.
          example: 2024-11-21T15:45:00Z
        tags:
          type: array
          description: Tags added to the task. Used to filter and categorized tasks.
          items:
            type: string
          example: ["shopping", "urgent"]
